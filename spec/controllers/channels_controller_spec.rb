require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ChannelsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Channel. As you add validations to Channel, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name_en:"name1", name_ar:"1 اسم", youtube_id:"dKYXpcbdgFe"}
  }

  let(:invalid_attributes) {
    {name_en:"aq", name_ar:nil, youtube_id:nil}
  }

  context 'as user' do
    let(:user) { create(:user) }
    before do
      sign_in user
    end
    describe "GET #index" do
      it "assigns all channels as @channels" do
        channel = Channel.create! valid_attributes
        get :index, params: {}
        expect(assigns(:channels)).to eq([channel])
      end
    end
    describe "GET #new" do
      it "assigns a new channel as @channel" do
        get :new, params: {}
        expect(assigns(:channel)).to be_a_new(Channel)
      end
    end
    describe "GET #edit" do
      it "assigns the requested channel as @channel" do
        channel = Channel.create! valid_attributes
        get :edit, params: {id: channel.to_param}
        expect(assigns(:channel)).to eq(channel)
      end
    end
    describe "POST #create" do
        context "with valid params" do
          it "creates a new Channel" do
            expect {
              post :create, params: {channel: valid_attributes}
            }.to change(Channel, :count).by(1)
          end

          it "assigns a newly created channel as @channel" do
            post :create, params: {channel: valid_attributes}
            expect(assigns(:channel)).to be_a(Channel)
            expect(assigns(:channel)).to be_persisted
          end

          it "redirects to the channels list" do
            post :create, params: {channel: valid_attributes}
            expect(response).to redirect_to(channels_url)
          end
        end
        context "with invalid params" do
          it "re-renders the 'new' template" do
            post :create, params: {channel: invalid_attributes}
            expect(response).to render_template("new")
          end
        end
      end
      describe "PUT #update" do
        context "with valid params" do
          let(:new_attributes) {
            {name_en:"name11", name_ar:"11 اسم", youtube_id:"111dKYXpcbdgFe"}
          }

          it "updates the requested channel" do
            channel = Channel.create! valid_attributes
            old_channel_name = channel.name_en
            put :update, params: {id: channel.to_param, channel: new_attributes}
            channel.reload
            expect(channel.name_en).not_to eq(valid_attributes[:name_en])
            expect(channel.name_ar).not_to eq(valid_attributes[:name_ar])
            expect(channel.youtube_id).not_to eq(valid_attributes[:youtube_id])
          end

          it "assigns the requested channel as @channel" do
            channel = Channel.create! valid_attributes
            put :update, params: {id: channel.to_param, channel: new_attributes}
            channel.reload
            expect(assigns(:channel)).to eq(channel)
          end

          it "redirects to the channels list" do
            channel = Channel.create! valid_attributes
            put :update, params: {id: channel.to_param, channel: new_attributes}
            expect(response).to redirect_to(channels_url)
          end
        end

        context "with invalid params" do
          it "assigns the channel as @channel" do
            channel = Channel.create! valid_attributes
            put :update, params: {id: channel.to_param, channel: invalid_attributes}
            expect(assigns(:channel)).to eq(channel)
          end

          it "re-renders the 'edit' template" do
            channel = Channel.create! valid_attributes
            put :update, params: {id: channel.to_param, channel: invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end
      describe "DELETE #destroy" do
        it "destroys the requested channel" do
          channel = Channel.create! valid_attributes
          expect {
            delete :destroy, params: {id: channel.to_param}
          }.to change(Channel, :count).by(-1)
        end

        it "redirects to the channels list" do
          channel = Channel.create! valid_attributes
          delete :destroy, params: {id: channel.to_param}
          expect(response).to redirect_to(channels_url)
        end
      end
  end
end
